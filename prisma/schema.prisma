generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id String @id @default(uuid())
  name String
  price Int
  imagePath String
  description String
  brandId String
  brand Brand @relation(fields: [brandId], references: [id], onDelete: Restrict)
  categoryId String
  category Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  isAvailable Boolean @default(true)
  isSpecialOffer Boolean @default(false)
  isNewProduct Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders Order[]
  variants ProductVariant[]
}

model ProductVariant {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size String
  color String
  sku String @unique
  stockQuantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([productId, size, color])
}

model Brand {
  id String @id @default(uuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]
}

model Category {
  id String @id @default(uuid())
  name String
  parentCategoryId String? @map("parent_category_id")
  parentCategory Category? @relation("ChildCategories", fields: [parentCategoryId], references: [id])
  children Category[] @relation("ChildCategories")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]
}

model User {
  id String @id @default(uuid())
  email String @unique
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders Order[]
}

model Order {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pricePaid Int
  productId String
  userId String
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
