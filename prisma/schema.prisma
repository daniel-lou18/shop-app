generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Auth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  passwordConfirmation String?
  role          UserRole  @default(USER)
  firstName     String?
  lastName      String?
  sex           Sex?
  country       String?
  address       String?
  city          String?
  state         String?
  zip           Int?
  isActive      Boolean @default(true)
  accounts      Account[]
  sessions      Session[]
  orders Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Product

enum Sex {
  homme
  femme
}

model Product {
  id String @id @default(cuid())
  name String
  price Int
  imagePath String?
  description String
  brandId String
  brand Brand @relation(fields: [brandId], references: [id], onDelete: Restrict)
  categoryId String
  category Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  sex Sex
  isActive Boolean @default(true)
  isArchived Boolean @default(false)
  isSpecialOffer Boolean @default(false)
  isNewProduct Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders Order[]
  variants ProductVariant[]

  @@index([brandId, categoryId, sex])
}

model ProductVariant {
  id String @id @default(cuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size String
  color String
  price Int
  imagePath String?
  sku String
  stockQuantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, size, color])
  @@index([productId, size, color])

}

model Brand {
  id String @id @default(cuid())
  name String
  sex Sex
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]

  @@index([name, sex])
}

model Category {
  id String @id @default(cuid())
  name String
  sex Sex
  parentCategoryId String? @map("parent_category_id")
  parentCategory Category? @relation("ChildCategories", fields: [parentCategoryId], references: [id])
  children Category[] @relation("ChildCategories")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]

  @@index([name, sex])
}

model Order {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pricePaid Int
  productId String
  userId String
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
